#!/usr/bin/env bash
### Parse `journal/inbox/` directory for new 750w exports
### Find Years to update, and then by year:
### - Rename source files to consistent naming
### - Apply initial pre-formating and send to `/journal/txt`
### - Update zipfile in `/journal/archive`
### - Remove source file

set -euo pipefail
IFS=$'\n\t'

# ─── CONFIG ──────────────────────────────────────────────────────────────────
ROOT=~/Documents/palimpsest
ARCHIVE=${ROOT}/journal/archive
INBOX=${ROOT}/journal/inbox
TXTS=${ROOT}/journal/txt
FORMAT_SCRIPT=${ROOT}/bin/init_format

# ─── PREPARE ─────────────────────────────────────────────────────────────────
mkdir -p "$ARCHIVE" "$TXTS"
shopt -s nullglob

printf "[proc_inbox] →  looking for new files in %s\n" "$INBOX"
src_files=()
for f in "$INBOX"/*.txt; do
  [[ -e "$f" ]] && src_files+=("$f")
done

if ((${#src_files[@]} == 0)); then
  printf "[proc_inbox] →  %s is empty. Nothing to update\n" "$INBOX"
  exit 0
fi

printf "[proc_inbox] →  %d new files found in '%s'\n" "$COUNT_FMT" "$INBOX"

# ─── FUNCTIONS ───────────────────────────────────────────────────────────────
declare -A year_files_map

rename_file() {
  local file="$1"
  local base="${file##*/}"
  if [[ $base =~ ([0-9]{4})_([0-9]{2}) ]]; then
    local year="${BASH_REMATCH[1]}"
    local month="${BASH_REMATCH[2]}"
    local new_name="journal_${year}_${month}.txt"
    local dest="$INBOX/$new_name"

    if [[ "$file" != "$dest" ]]; then
      printf "[proc_inbox] →  renaming '%s' → '%s'\n" "$base" "$new_name"
      mv -- "$file" "$dest"
    fi

    # accumulate per-year list (newline-separated)
    year_files_map["$year"]+="$new_name"$'\n'
  else
    printf "[proc_inbox] →  skipping unrecognized file '%s'\n" "$base"
  fi
}

process_year() {
  local year="$1"
  local files_list="$2"
  local year_dir="$TXTS/$year"

  # ensure output dir exists
  mkdir -p "$year_dir"

  # read the newline-separated list into an array
  # strip final "\n" and save into an array
  files_list="${files_list%$'\n'}"
  mapfile -t files <<<"$files_list"

  printf "[proc_inbox] →  processing %s month(s) for year %s\n" "${#files[@]}" "$year"
  for fname in "${files[@]}"; do
    [[ -z "$fname" ]] && continue
    local infile="$INBOX/$fname"
    local month="${fname##*_}"
    month="${month%.txt}"
    printf "[proc_inbox] →  formatting month '%s' → '%s-%s.txt'\n" "$month" "$year" "$month"
    "$FORMAT_SCRIPT" "$infile" >"$year_dir/$year-$month.txt"
  done

  local archive="$ARCHIVE/$year.zip"
  if [[ -f $archive ]]; then
    local action="updating"
  else
    local action="creating"
  fi
  printf "[proc_inbox] →  '%s' archive '%s'\n" "$action" "$(basename "$archive")"
  (cd "$INBOX" && zip -qu "$archive" "${files[@]}" && rm -- "${files[@]}")
}

# ─── MAIN ──────────────────────────────────────────────────────────────────────
for file in "${src_files[@]}"; do
  rename_file "$file"
done

if ((${#year_files_map[@]})); then
  # list of years to update
  years=("${!year_files_map[@]}")
  printf "[proc_inbox] →  updating year(s): %s\n" "${years[*]//$'\n'/ }"
  for yr in "${years[@]}"; do
    process_year "$yr" "${year_files_map[$yr]}"
  done
fi
